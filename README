OpenRTDynamics v0.99d -- Real Time Dynamic Toolbox suitable for
                         implementing time discrete controllers 
                         using block schematics similar to to 
                         Simulink or Scicos.


OS Dependency
-------------

- Linux. Maybe other UNIX-like.
- Shouldn't be a problem to port to other OS
  or even embedded systems

License
-------

LGPL, see COPYING / COPYING.LESSER

Requirements
------------

Scilab 5 or above
Scilab 4.1.2 also works, but the toolbox will not load. Manually loading
             the *sci is required.

Compile / Install
-----------------

Run "make install" on 32/64 linux platforms

this will compile libortd.so and libdyn_generic_exec, which is a generic 
schematic executor. Both are copied to /usr/local/[bin,lib] respectively.


The command

  make install_toolbox

will ask you for your Scilab 5 installation directory (where the package from the
Scilab Website was extracted) and installs the Scilab toolbox.

Alternatively, link or copy the the "ld_toolbox" directory (not only its contents) 
to your <scilab installation directory>/share/scilab/contrib .


Tools
-----

- libdyn_generic_exec
    executes schematics in realtime / as fast as possible
    type "libdyn_generic_exec --help" for help

Examples
--------

Examples can be found within the "examples" subdirectory.

For a ready to run example go into the examples directory via shell and type:

# sh sh_runoscillator

A second try could be to execute "simple_demo.sce" within scilab 5 or above. 
It will create *.[i,r]par files containing the schematic.
Ensure that you loaded the "ld_toolbox" at first. Then run the command 

# libdyn_generic_exec -s simple_demo -i 901 -l 100

within the "examples" directory. It will load the [i,r]par files, 
compile the schematic and start execution. This example will create
several “.dat” output files.

You can also use simple_demo.sce as a template.

Another example is pulsetest -- a realtime synthesiser, which uses pulseaudio.
Therefore, for compiling you need to install the pa-headers at first:

sudo apt-get install libpulse-dev

Run it with ./pulsetest and type “q” or “w” or “ESC”.

TODO
----

- Makefile
- Better Documentation (the provided one is out of date)

- Wraper block for backgroud computations for state updates
- block interpreting math formula
- wraper for scicos blocks and inclusion of hart toolbox
- a dynamical linker that loads *so files as it might be described
  within the schematics
- ....

BUGS
----

- Transfer function blocks are limited by a order of max 20 for the given tf
  No error catching
- Objects created by libdyn_new_feedback can by ONLY used once
- Otherwise it works quite stable (Used for many controller implementations)

CONTACT
-------

Christian Klauer
Control Systems Group
TU-Berlin, Germany
Email: <klauer@control.tu-berlin.de>
Web: http://www.control.tu-berlin.de/User:Christian_Klauer


CHANGELOG
---------

11.4.11 (v0.99b)
  - small Bug within ld_const function
  - a new printf block

v0.99c
  - Makefile
  - better dokumentation

v0.99d
  - Nicer Scilab interface

v0.99e
  - muParser Block support for using math formula within simulations
