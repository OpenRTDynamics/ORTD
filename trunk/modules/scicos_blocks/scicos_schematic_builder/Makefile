
ifeq ($(main_makefile_invoked),yes)

else
	# If this makefile is just run within this directory

	CC = cc
	CPP = c++
	LD = ld

	#CFLAGS = -I../.. -O2 



	# detect system type
	host-type := $(shell arch)

	ifeq ($(host-type),x86_64)
	# 64 Bit
	CFLAGS = -fPIC -O2 -g -I../..
	INCLUDE = -I../..
	LDFLAGS = -shared
	else
	# 32 Bit
	CFLAGS =  -I../.. -g
	INCLUDE = -I../..
	LDFLAGS = -shared 
	endif

endif # ifeq ($(main_makefile_invoked),yes)



BLOCKSRCS=$(wildcard compfn/*.c)
BLOCKOBJS=$(BLOCKSRCS:.c=.o)

# Kill the functions SuperBlock_actuator() and SuperBlock_sensor()  from autogenerated code
MACROS= -DSuperBlock_actuator\(a,b,c,d,e,f,g,h,i\)=\; 
MACROS+= -DSuperBlock_sensor\(a,b,c,d,e,f,g,h,i\)=\;

all: sharedlib staticlib


$(BLOCKOBJS): $(BLOCKSRCS)
	$(CC) -c -o $@ $< $(CFLAGS) -Iscicos_include $(MACROS)
	

blocks: $(BLOCKOBJS)
	echo "All blocks/schematics were compiled"

scicos_compfn_index.o: scicos_compfn_index.c
	$(CC) $(CFLAGS) -c -o scicos_compfn_index.o scicos_compfn_index.c

staticlib: scicos_compfn_index.o blocks
	ar rvs libscicosschematics.a scicos_compfn_index.o $(BLOCKOBJS)

sharedlib: scicos_compfn_index.o blocks
	ld -shared -o libscicosschematics.so scicos_compfn_index.o $(BLOCKOBJS)

clean:
	rm -f $(BLOCKOBJS) libscicosschematics.a libscicosschematics.so scicos_compfn_index.o


# blocks: $(OBJS)
# 	echo link blocks

# 
# all: lib
# 	echo "Module template done"
# 
# lib: scicos_block_interface.o ScicosWrapper.o compfns/SuperBlock.o
# 	ar rvs module.a scicos_block_interface.o ScicosWrapper.o compfns/SuperBlock.o # Will always be included
# 	#ar rvs module_Linux.a special_linux_code.o   # Only include for "Linux" Target
# 
# 
# clean:
# 	rm -f *.o compfn/*.o module.a
# 
# 
# ## EITHER THIS
# 
# #template.o: template.c
# #	$(CC) $(CFLAGS) $(INCLUDE) -c template.c 
# 
# ## OR THIS
# 
# scicos_block_interface.o: scicos_block_interface.cpp
# 	$(CC) $(CFLAGS) $(INCLUDE) -c scicos_block_interface.cpp
# 
# ScicosWrapper.o: ScicosWrapper.cpp
# 	$(CC) $(CFLAGS) $(INCLUDE) -c ScicosWrapper.cpp
# 
# compfns/SuperBlock.o: compfns/SuperBlock.c
# 	$(CC) $(CFLAGS) $(INCLUDE) -I .. -c compfns/SuperBlock.c -o compfns/SuperBlock.o
# 
